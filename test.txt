import { Component, OnInit, OnDestroy } from '@angular/core';
import { Router, ActivatedRoute } from '@angular/router';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { first } from 'rxjs/operators';
import { AuthenticationService } from '../core/services/authentication.service';
import { Subscription } from 'rxjs';
import { AppTheme, ThemeProviderService } from '../shared/services/theme-provider.service';
import { LoginUrlConstants } from '../shared/constants/url-constants';

@Component({ templateUrl: './login.component.html', styleUrls: ['./login.component.css'] })
export class LoginComponent implements OnInit, OnDestroy {
    loginForm: FormGroup;
    loading = false;
    submitted = false;
    returnUrl: string;
    error = '';
    subscriptionOnLogin$: Subscription;
    subscriptions: Subscription[] = [];
    isPasswordShow = false;
    loggedIn: boolean;

    constructor(
        private formBuilder: FormBuilder,
        private route: ActivatedRoute,
        private router: Router,
        private authenticationService: AuthenticationService,
        private themeProviderService: ThemeProviderService
    ) {
        // redirect to home if already logged in
        if (this.authenticationService.currentUserValue) {
            this.router.navigate(['/']);
        }
    }

    ngOnInit() {
        this.loginForm = this.formBuilder.group({
            username: ['', Validators.required],
            password: ['', Validators.required]
        });

        // get return url from route parameters or default to '/'
        this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/';
    }

    // convenience getter for easy access to form fields
    get f() { return this.loginForm.controls; }

    onSubmit() {
        this.submitted = true;

        // stop here if form is invalid
        if (this.loginForm.invalid) {
            return;
        }

        this.loading = true;
        this.subscriptionOnLogin$ = this.authenticationService.login(this.f.username.value, this.f.password.value)
            .pipe(first())
            .subscribe(
                data => {
                    this.loggedIn = true;
                    this.authenticationService.setUserContext(data);
                    let tokenData = JSON.parse(atob(data.token.split('.')[1])); 
                    if(tokenData.role == "Umpire"){                                            
                      (window as any).open(window.location.origin +LoginUrlConstants.MATCHHUB_URL,"_self");                 
                    }             
                    this.router.navigateByUrl(this.returnUrl);
                },
                error => {
                    this.error = error;
                    this.loading = false;
                    this.submitted = false;
                    this.loginForm.reset();
                });
        this.subscriptions.push(this.subscriptionOnLogin$);
    }

    ngOnDestroy() {
        this.subscriptions.forEach((subscription) => subscription.unsubscribe())
    }
}
